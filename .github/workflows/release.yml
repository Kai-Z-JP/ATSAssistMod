# This is a basic workflow to help you get started with Actions

name: Create a Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
    push:
        branches:
            - "*"
        tags:
            - "*"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    build:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            -   uses: actions/checkout@v2
            -   name: Set up JDK 1.8
                uses: actions/setup-java@master
                with:
                    java-version: 1.8

            -   name: get shortsha
                id: vars
                run: |
                    echo ::set-output name=sha_short::$(git rev-parse --short=7 ${{ github.sha }})

            -   name: Make gradlew executable
                run: chmod +x ./gradlew

            -   name: Build with Gradle
                run: ./gradlew build

            -   name: Upload build artifact
                # タグ以外が push された場合のみ実行される
                if: "!startsWith(github.ref, 'refs/tags/')"
                uses: actions/upload-artifact@v2
                with:
                    # optional, default is artifact
                    name: ATSAssistMod-${{ steps.vars.outputs.sha_short }}.jar
                    # A file, directory or wildcard pattern that describes what to upload
                    path: build/libs/ATSAssistMod-latest.jar

            -   uses: actions/create-release@master
                id: create_release
                if: startsWith(github.ref, 'refs/tags/')
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
                    tag_name: ${{ github.ref }}
                    # The name of the release. For example, `Release v1.0.1`
                    release_name: ((contains(${{ github.ref }}, "beta") && Pre-Release) || Release) ${{ github.ref }}
                    draft: true
                    prerelease: true

            -   uses: actions/upload-release-asset@master
                if: startsWith(github.ref, 'refs/tags/')
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    # The URL for uploading assets to the release
                    upload_url: ${{ steps.create_release.outputs.upload_url }}
                    # The path to the asset you want to upload
                    asset_path: ./build/libs/ATSAssistMod${{ github.ref }}.jar
                    # The name of the asset you want to upload
                    asset_name: ATSAssistMod-${{ github.ref }}.jar
                    # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
                    asset_content_type: application/zip